// Generated by gencpp from file zoo_imu/Sensor.msg
// DO NOT EDIT!


#ifndef ZOO_IMU_MESSAGE_SENSOR_H
#define ZOO_IMU_MESSAGE_SENSOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace zoo_imu
{
template <class ContainerAllocator>
struct Sensor_
{
  typedef Sensor_<ContainerAllocator> Type;

  Sensor_()
    : ultra1(0)
    , ultra2(0)
    , ultra3(0)
    , ultra4(0)
    , grey_sensor(0)
    , collision(0)
    , voltage(0)
    , current(0)  {
    }
  Sensor_(const ContainerAllocator& _alloc)
    : ultra1(0)
    , ultra2(0)
    , ultra3(0)
    , ultra4(0)
    , grey_sensor(0)
    , collision(0)
    , voltage(0)
    , current(0)  {
  (void)_alloc;
    }



   typedef int16_t _ultra1_type;
  _ultra1_type ultra1;

   typedef int16_t _ultra2_type;
  _ultra2_type ultra2;

   typedef int16_t _ultra3_type;
  _ultra3_type ultra3;

   typedef int16_t _ultra4_type;
  _ultra4_type ultra4;

   typedef int8_t _grey_sensor_type;
  _grey_sensor_type grey_sensor;

   typedef int8_t _collision_type;
  _collision_type collision;

   typedef int16_t _voltage_type;
  _voltage_type voltage;

   typedef int16_t _current_type;
  _current_type current;





  typedef boost::shared_ptr< ::zoo_imu::Sensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zoo_imu::Sensor_<ContainerAllocator> const> ConstPtr;

}; // struct Sensor_

typedef ::zoo_imu::Sensor_<std::allocator<void> > Sensor;

typedef boost::shared_ptr< ::zoo_imu::Sensor > SensorPtr;
typedef boost::shared_ptr< ::zoo_imu::Sensor const> SensorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zoo_imu::Sensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zoo_imu::Sensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zoo_imu::Sensor_<ContainerAllocator1> & lhs, const ::zoo_imu::Sensor_<ContainerAllocator2> & rhs)
{
  return lhs.ultra1 == rhs.ultra1 &&
    lhs.ultra2 == rhs.ultra2 &&
    lhs.ultra3 == rhs.ultra3 &&
    lhs.ultra4 == rhs.ultra4 &&
    lhs.grey_sensor == rhs.grey_sensor &&
    lhs.collision == rhs.collision &&
    lhs.voltage == rhs.voltage &&
    lhs.current == rhs.current;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zoo_imu::Sensor_<ContainerAllocator1> & lhs, const ::zoo_imu::Sensor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zoo_imu

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::zoo_imu::Sensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zoo_imu::Sensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zoo_imu::Sensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zoo_imu::Sensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zoo_imu::Sensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zoo_imu::Sensor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zoo_imu::Sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae4bc18611c4c4b13dc973d79b08faf4";
  }

  static const char* value(const ::zoo_imu::Sensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae4bc18611c4c4b1ULL;
  static const uint64_t static_value2 = 0x3dc973d79b08faf4ULL;
};

template<class ContainerAllocator>
struct DataType< ::zoo_imu::Sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zoo_imu/Sensor";
  }

  static const char* value(const ::zoo_imu::Sensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zoo_imu::Sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 ultra1\n"
"int16 ultra2\n"
"int16 ultra3\n"
"int16 ultra4\n"
"int8 grey_sensor\n"
"int8 collision\n"
"int16 voltage\n"
"int16 current\n"
;
  }

  static const char* value(const ::zoo_imu::Sensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zoo_imu::Sensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ultra1);
      stream.next(m.ultra2);
      stream.next(m.ultra3);
      stream.next(m.ultra4);
      stream.next(m.grey_sensor);
      stream.next(m.collision);
      stream.next(m.voltage);
      stream.next(m.current);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Sensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zoo_imu::Sensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zoo_imu::Sensor_<ContainerAllocator>& v)
  {
    s << indent << "ultra1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ultra1);
    s << indent << "ultra2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ultra2);
    s << indent << "ultra3: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ultra3);
    s << indent << "ultra4: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ultra4);
    s << indent << "grey_sensor: ";
    Printer<int8_t>::stream(s, indent + "  ", v.grey_sensor);
    s << indent << "collision: ";
    Printer<int8_t>::stream(s, indent + "  ", v.collision);
    s << indent << "voltage: ";
    Printer<int16_t>::stream(s, indent + "  ", v.voltage);
    s << indent << "current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.current);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZOO_IMU_MESSAGE_SENSOR_H
